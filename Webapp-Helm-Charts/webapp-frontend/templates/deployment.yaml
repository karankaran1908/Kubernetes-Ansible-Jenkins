apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "serviceAccountName" .}}
  # namespace: {{ .Values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ template "roleName" .}}
  # namespace: {{ .Values.namespace }}
rules:
  - apiGroups: [""]
    resources: ["secrets", "configmaps", "services"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ template "roleBindingName" .}}
  # namespace: {{ .Values.namespace }}
roleRef:
  kind: Role
  name: {{ template "roleName" .}}
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: {{ template "serviceAccountName" .}}
    namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "dockerregistrykeyName" .}}
  # namespace: {{ .Values.namespace }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ template "imagePullSecret" . }}
---
{{ if .Values.dockerImage }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{template "deploymentName" .}}
  labels:
    app: {{ template "labelName" .}}
  # namespace: {{ .Values.namespace }}
spec:
  replicas: 3
  minReadySeconds: 10
  revisionHistoryLimit: 3
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels: 
      app: {{ template "labelName" . }}
  template:
    metadata:
      name: {{ template "labelName" . }}
      labels:
        app: {{ template "labelName" . }}
    spec:
      serviceAccountName: {{ template "serviceAccountName" .}}
      initContainers:
        - name: {{ template "initContainerName" . }}
          image: busybox:1.28
          command: ['sh', '-c', {{ include "initCommand" . | squote }}]
      containers:
        - name: {{ template "labelName" . }}
          image: {{ .Values.dockerImage }} 
          imagePullPolicy: Always
          env:
            - name: REACT_APP_BACKEND_ENDPOINT
              value: {{ .Values.backendServiceEndpoint }} 
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 100
      imagePullSecrets:
        - name: {{ template "dockerregistrykeyName" .}}
{{ end }}
---
{{ if .Values.dockerImage }}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "serviceName" .}}
  labels:
    name: {{ template "labelName" .}}
  # namespace: {{ .Values.namespace }}
spec:
  type: NodePort
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  selector: 
    app: {{ template "labelName" .}}
{{ end }}
---
{{ if .Values.dockerImage }}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "ingressName" .}}
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    ingress.kubernetes.io/ssl-redirect: "true"
    certmanager.k8s.io/cluster-issuer: letsencrypt-prod
spec:
  tls: # < placing a host in the TLS config will indicate a certificate should be created
    - hosts:
        - {{ template "webappDomainName" .}}
      secretName: webapp-acme-crt-secret
  rules:
  - host: {{ template "webappDomainName" .}}
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ template "serviceName" .}}
          servicePort: 3000
{{ end }}