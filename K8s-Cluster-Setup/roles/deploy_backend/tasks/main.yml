- name: Create a k8s namespace
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
          name: api
          labels:
              name: api    
      
# - name: Creating base64 value for db_username
#   shell: echo -n "{{db_username}}" | base64
#   register: db_username_secret
- debug:
    msg: "{{db_username | b64encode}}"

# - name: Creating base64 value for db_password
#   shell: echo -n "{{db_password}}" | base64
#   register: db_password_secret
- debug:
    msg: "{{db_password| b64encode}}"

- name: Create a secret 
  k8s:
    state: present
    definition: 
      apiVersion: v1
      kind: Secret
      metadata:
        name: mysecret 
        namespace: api
      type: Opaque
      data:
        DB_USER: "{{db_username | b64encode}}"
        DB_PASSWORD: "{{db_password| b64encode}}"
      # data:
      #   DB_USER: dGVhbQ==
      #   DB_PASSWORD: UXdlcnR5MTIz

# - name: Create a docker secret 
#   shell: kubectl create secret docker-registry regcred -n api --docker-server=https://index.docker.io/v1/ --docker-username=shubh1612 --docker-password=Myaccount1@ --docker-email=sharma.shubh@husky.neu.edu
- name: Create a docker secret 
  shell: kubectl create secret docker-registry regcred -n api --docker-server=https://index.docker.io/v1/ --docker-username={{dockerhub_username}} --docker-password={{dockerhub_password}} --docker-email={{dockerhub_email}} 

- name: Create a ConfigMap 
  k8s:
    state: present
    definition:          
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: env-config
        namespace: api
      data:
        WEBAPP_PORT: "3000"
        DB_HOST_NAME: "{{ rds_endpoint }}"
        DB_DATABASE_NAME: csye7374
        # DB_HOST_NAME: "{{rds_instance_result.instance.endpoint}}"
        # DB_DATABASE_NAME: "{{rds_instance_result.instance.db_name}}"
        DB_PORT: "5432" 

- name: Create a ReplicaSet 
  k8s:
    state: present
    definition:   
      apiVersion: apps/v1
      kind: ReplicaSet
      metadata:
        name: backend-replicaset
        labels:
          app: backend
        namespace: api  
      spec:
        replicas: 3
        selector:
          matchLabels:
            app: backend
        template:
          metadata:
            labels:
              app: backend
          spec:
            containers:
            - name: backend
              image: "{{dockerhub_username}}/{{api_image}}"
              # resources:
              #   requests:
              #     memory: "64Mi"
              #     cpu: "250m"
              #   limits:
              #     memory: "128Mi"
              #     cpu: "500m"
              env:
              - name: WEBAPP_PORT
                valueFrom: 
                  configMapKeyRef: 
                    name: env-config
                    key: WEBAPP_PORT
              - name: DB_PASSWORD
                valueFrom: 
                  secretKeyRef: 
                    name: mysecret
                    key: DB_PASSWORD      
              - name: DB_USER
                valueFrom: 
                  secretKeyRef: 
                    name: mysecret
                    key: DB_USER
              - name: DB_HOST_NAME
                valueFrom: 
                  configMapKeyRef: 
                    name: env-config
                    key: DB_HOST_NAME
              - name: DB_DATABASE_NAME
                valueFrom: 
                  configMapKeyRef: 
                    name: env-config
                    key: DB_DATABASE_NAME
              - name: DB_PORT
                valueFrom: 
                  configMapKeyRef: 
                    name: env-config
                    key: DB_PORT 
              ports: 
                  - containerPort: 3000
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 10
                periodSeconds: 100
              livenessProbe:
                httpGet:
                  path: /
                  port: 3000
                initialDelaySeconds: 10
                periodSeconds: 100    
            imagePullSecrets:
            - name: regcred   

- name: Create a LoadBalancer 
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: backendlb
        labels:
          name: backend
        namespace: api
      spec:
        type: LoadBalancer
        ports:
          - protocol: TCP
            port: 3000
            targetPort: 3000
        selector: 
            app: backend
  # register: backend_lb_dns_name
  
- name :
  shell: |
    sleep 180   
  
- name: Get an existing Service object
  k8s_info:
    api_version: v1
    kind: Service
    name: backendlb
    namespace: api
  register: backlb   

- debug:
    msg: "{{backlb.resources[0].status.loadBalancer.ingress[0].hostname}}"


     